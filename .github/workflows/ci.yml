name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  python:
    name: Python Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      working-directory: python
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      working-directory: python
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: python/coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}

  dart:
    name: Dart Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dart-version: ['3.0', '3.1', 'stable']
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Dart ${{ matrix.dart-version }}
      uses: dart-lang/setup-dart@v1
      with:
        dart-version: ${{ matrix.dart-version }}
    
    - name: Cache Dart dependencies
      uses: actions/cache@v3
      with:
        path: |
          dart/.dart_tool
          dart/pubspec.lock
        key: ${{ runner.os }}-dart-${{ hashFiles('dart/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-dart-
    
    - name: Install dependencies
      working-directory: dart
      run: dart pub get
    
    - name: Analyze code
      working-directory: dart
      run: dart analyze --fatal-infos
    
    - name: Format check
      working-directory: dart
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Run tests
      working-directory: dart
      run: dart test --coverage=coverage
    
    - name: Generate coverage report
      working-directory: dart
      run: |
        dart pub global activate coverage
        dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: dart/coverage/lcov.info
        flags: dart
        name: dart-${{ matrix.dart-version }}

  rust:
    name: Rust Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta, nightly]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Rust ${{ matrix.rust-version }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          rust/target
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Format check
      working-directory: rust
      run: cargo fmt --check
    
    - name: Clippy check
      working-directory: rust
      run: cargo clippy -- -D warnings
    
    - name: Build
      working-directory: rust
      run: cargo build --verbose
    
    - name: Run tests
      working-directory: rust
      run: cargo test --verbose
    
    - name: Generate coverage
      working-directory: rust
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: rust/cobertura.xml
        flags: rust
        name: rust-${{ matrix.rust-version }}

  java:
    name: Java Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17, 21]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('java/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: Validate Maven project
      working-directory: java
      run: mvn validate
    
    - name: Compile
      working-directory: java
      run: mvn compile
    
    - name: Run tests
      working-directory: java
      run: mvn test
    
    - name: Generate test report
      working-directory: java
      run: mvn jacoco:report
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: java/target/site/jacoco/jacoco.xml
        flags: java
        name: java-${{ matrix.java-version }}
    
    - name: Package
      working-directory: java
      run: mvn package

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python, dart, rust, java]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Set up Dart
      uses: dart-lang/setup-dart@v1
      with:
        dart-version: 'stable'
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Run integration tests
      run: |
        echo "Running cross-language integration tests..."
        # Add integration test commands here
        ./build.sh
    
    - name: Generate API consistency report
      run: |
        echo "Generating API consistency report..."
        # Add API consistency validation here

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false